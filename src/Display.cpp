#include "Display.h"

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET     4
#define SCREEN_ADDRESS 0x3C

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);


const unsigned char bmp_waves_0 [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x30, 0x04, 0x00, 0x04, 0x48, 0x04, 0x00, 0x04, 0x48, 0x04, 0x00, 0x04, 0x84, 0x04, 0x00, 0x04, 0x84, 0x04, 0x00, 0x04, 0x04, 0x24, 0x00, 0x04, 0x04, 0x24, 0x00, 0x04, 0x02, 0x44, 0x00, 0x04, 0x02, 0x44, 0x00, 0x04, 0x01, 0x84, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x49, 0x5c, 0x00, 0x04, 0x55, 0x50, 0x00, 0x05, 0x5d, 0x58, 0x00, 0x05, 0x55, 0x50, 0x00, 0x02, 0x94, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char bmp_waves_1 [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x20, 0x04, 0x00, 0x04, 0x50, 0x04, 0x00, 0x04, 0x88, 0x04, 0x00, 0x05, 0x04, 0x14, 0x00, 0x04, 0x02, 0x24, 0x00, 0x04, 0x01, 0x44, 0x00, 0x04, 0x00, 0x84, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x49, 0x5c, 0x00, 0x04, 0x55, 0x50, 0x00, 0x05, 0x5d, 0x58, 0x00, 0x05, 0x55, 0x50, 0x00, 0x02, 0x94, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char bmp_waves_2 [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x81, 0x04, 0x00, 0x05, 0x42, 0x84, 0x00, 0x05, 0x22, 0x44, 0x00, 0x05, 0x12, 0x24, 0x00, 0x05, 0x0a, 0x14, 0x00, 0x04, 0x04, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x49, 0x5c, 0x00, 0x04, 0x55, 0x50, 0x00, 0x05, 0x5d, 0x58, 0x00, 0x05, 0x55, 0x50, 0x00, 0x02, 0x94, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char bmp_waves_3 [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x78, 0x04, 0x00, 0x04, 0x84, 0x04, 0x00, 0x04, 0x84, 0x24, 0x00, 0x04, 0x84, 0x24, 0x00, 0x04, 0x84, 0x24, 0x00, 0x04, 0x04, 0x24, 0x00, 0x04, 0x03, 0xc4, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x49, 0x5c, 0x00, 0x04, 0x55, 0x50, 0x00, 0x05, 0x5d, 0x58, 0x00, 0x05, 0x55, 0x50, 0x00, 0x02, 0x94, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00};

const unsigned char bmp_waves_4 [] PROGMEM = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0xe4, 0x00, 0x04, 0xe0, 0xa4, 0x00, 0x04, 0xa0, 0xb4, 0x00, 0x04, 0xae, 0x84, 0x00, 0x05, 0xaa, 0x84, 0x00, 0x04, 0x2b, 0x84, 0x00, 0x04, 0x28, 0x04, 0x00, 0x04, 0x28, 0x04, 0x00, 0x04, 0x38, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x49, 0x5c, 0x00, 0x04, 0x55, 0x50, 0x00, 0x05, 0x5d, 0x58, 0x00, 0x05, 0x55, 0x50, 0x00, 0x02, 0x94, 0x9c, 0x00, 0x00, 0x00, 0x00, 0x00};


void initDisplay() {
    // SSD1306_SWITCHCAPVCC = generate display voltage from 3.3V internally
    if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) {
        Serial.println(F("SSD1306 allocation failed"));
        for(;;); // Don't proceed, loop forever
    }
}

void drawDisplay() {
    display.display();
}

void clearDisplay() {
    display.clearDisplay();
}

void compLabel(int posX, int posY, char* label) {
  display.drawRoundRect(posX, posY, 32, 32, 2, SSD1306_WHITE);

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(posX + 8, posY + 14);
  display.println(label); 
}

void compKnob(int posX, int posY, float value, char* label) {
  display.drawCircle(posX + 15, posY + 11, 10, SSD1306_WHITE);
  display.drawPixel(posX + 15 + (cos(value * (2 * PI) + (0.5 * PI)) * 7), posY + 11 + (sin(value * (2 * PI) + (0.5 * PI)) * 7), SSD1306_WHITE);
  display.drawPixel(posX + 15 + (cos(value * (2 * PI) + (0.5 * PI)) * 8), posY + 11 + (sin(value * (2 * PI) + (0.5 * PI)) * 8), SSD1306_WHITE);

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(posX + 8, posY + 23);
  display.println(label);
}

void compImage(int posX, int posY) {
  display.drawBitmap(posX, posY, bmp_waves_0, 28, 28, SSD1306_WHITE);
}

void compWaves(int posX, int posY, int wave) {
  const unsigned char* waves [5] = {bmp_waves_0, bmp_waves_1, bmp_waves_2, bmp_waves_3, bmp_waves_4};

  if (wave < 5) {
    display.drawBitmap(posX, posY, waves[wave], 28, 28, SSD1306_WHITE);
  } else {
    display.drawBitmap(posX, posY, bmp_waves_0, 28, 28, SSD1306_WHITE);
  }
}

void compSlider(int posX, int posY, float value, char* label) {
  display.drawLine(posX + 12, posY + 1, posX + 18, posY + 1, SSD1306_WHITE);
  display.drawLine(posX + 12, posY + 21, posX + 18, posY + 21, SSD1306_WHITE);
  display.drawLine(posX + 11, posY + 2, posX + 11, posY + 20, SSD1306_WHITE);
  display.drawLine(posX + 19, posY + 2, posX + 19, posY + 20, SSD1306_WHITE);

  for (size_t i = 0; i < 10; i++) {
    display.drawPixel(posX + 13, (posY + 3) + i * 2, SSD1306_WHITE);
    display.drawPixel(posX + 17, (posY + 3) + i * 2, SSD1306_WHITE);
  }

  for (size_t i = 0; i < 17 * value; i++) {
    display.drawLine(posX + 13, (posY + 19) - i, posX + 17, (posY + 19) - i, SSD1306_WHITE);
  }

  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(posX + 8, posY + 23);
  display.println(label);
}
